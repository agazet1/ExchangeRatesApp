//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IClient {
    /**
     * @param apiCode (optional) 
     * @return OK
     */
    getCurrencyList(apiCode?: string | undefined): Observable<CurrencyDto[]>;
    /**
     * @return OK
     */
    getExchangeRateApiList(): Observable<ExchangeRateApiTypeDto[]>;
    /**
     * @param apiCode (optional) 
     * @param sourceCurrency (optional) 
     * @param targetCurrency (optional) 
     * @param dateFrom (optional) 
     * @param dateTo (optional) 
     * @return OK
     */
    calculateCurrencyRate(apiCode?: string | undefined, sourceCurrency?: string | undefined, targetCurrency?: string | undefined, dateFrom?: Date | undefined, dateTo?: Date | undefined): Observable<CurrencyRateResponseDto>;
}

@Injectable()
export class Client implements IClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param apiCode (optional) 
     * @return OK
     */
    getCurrencyList(apiCode?: string | undefined): Observable<CurrencyDto[]> {
        let url_ = this.baseUrl + "/ExchangeRate/GetCurrencyList?";
        if (apiCode === null)
            throw new Error("The parameter 'apiCode' cannot be null.");
        else if (apiCode !== undefined)
            url_ += "apiCode=" + encodeURIComponent("" + apiCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrencyList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrencyList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CurrencyDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CurrencyDto[]>;
        }));
    }

    protected processGetCurrencyList(response: HttpResponseBase): Observable<CurrencyDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CurrencyDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getExchangeRateApiList(): Observable<ExchangeRateApiTypeDto[]> {
        let url_ = this.baseUrl + "/ExchangeRate/GetExchangeRateApiList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExchangeRateApiList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExchangeRateApiList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExchangeRateApiTypeDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExchangeRateApiTypeDto[]>;
        }));
    }

    protected processGetExchangeRateApiList(response: HttpResponseBase): Observable<ExchangeRateApiTypeDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ExchangeRateApiTypeDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param apiCode (optional) 
     * @param sourceCurrency (optional) 
     * @param targetCurrency (optional) 
     * @param dateFrom (optional) 
     * @param dateTo (optional) 
     * @return OK
     */
    calculateCurrencyRate(apiCode?: string | undefined, sourceCurrency?: string | undefined, targetCurrency?: string | undefined, dateFrom?: Date | undefined, dateTo?: Date | undefined): Observable<CurrencyRateResponseDto> {
        let url_ = this.baseUrl + "/ExchangeRate/CalculateCurrencyRate?";
        if (apiCode === null)
            throw new Error("The parameter 'apiCode' cannot be null.");
        else if (apiCode !== undefined)
            url_ += "apiCode=" + encodeURIComponent("" + apiCode) + "&";
        if (sourceCurrency === null)
            throw new Error("The parameter 'sourceCurrency' cannot be null.");
        else if (sourceCurrency !== undefined)
            url_ += "sourceCurrency=" + encodeURIComponent("" + sourceCurrency) + "&";
        if (targetCurrency === null)
            throw new Error("The parameter 'targetCurrency' cannot be null.");
        else if (targetCurrency !== undefined)
            url_ += "targetCurrency=" + encodeURIComponent("" + targetCurrency) + "&";
        if (dateFrom === null)
            throw new Error("The parameter 'dateFrom' cannot be null.");
        else if (dateFrom !== undefined)
            url_ += "DateFrom=" + encodeURIComponent(dateFrom ? "" + dateFrom.toISOString() : "") + "&";
        if (dateTo === null)
            throw new Error("The parameter 'dateTo' cannot be null.");
        else if (dateTo !== undefined)
            url_ += "DateTo=" + encodeURIComponent(dateTo ? "" + dateTo.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCalculateCurrencyRate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCalculateCurrencyRate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CurrencyRateResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CurrencyRateResponseDto>;
        }));
    }

    protected processCalculateCurrencyRate(response: HttpResponseBase): Observable<CurrencyRateResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CurrencyRateResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class CurrencyDto implements ICurrencyDto {
    code?: string | undefined;
    name?: string | undefined;

    constructor(data?: ICurrencyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CurrencyDto {
        data = typeof data === 'object' ? data : {};
        let result = new CurrencyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        return data;
    }
}

export interface ICurrencyDto {
    code?: string | undefined;
    name?: string | undefined;
}

export class CurrencyRateResponseDto implements ICurrencyRateResponseDto {
    sourceCurrencyCode?: string | undefined;
    targetCurrencyCode?: string | undefined;
    dateFrom?: Date;
    dateTo?: Date;
    minRate?: number;
    maxRate?: number;
    avgRate?: number;
    rateList?: RateForDateDto[] | undefined;

    constructor(data?: ICurrencyRateResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sourceCurrencyCode = _data["sourceCurrencyCode"];
            this.targetCurrencyCode = _data["targetCurrencyCode"];
            this.dateFrom = _data["dateFrom"] ? new Date(_data["dateFrom"].toString()) : <any>undefined;
            this.dateTo = _data["dateTo"] ? new Date(_data["dateTo"].toString()) : <any>undefined;
            this.minRate = _data["minRate"];
            this.maxRate = _data["maxRate"];
            this.avgRate = _data["avgRate"];
            if (Array.isArray(_data["rateList"])) {
                this.rateList = [] as any;
                for (let item of _data["rateList"])
                    this.rateList!.push(RateForDateDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CurrencyRateResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CurrencyRateResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sourceCurrencyCode"] = this.sourceCurrencyCode;
        data["targetCurrencyCode"] = this.targetCurrencyCode;
        data["dateFrom"] = this.dateFrom ? this.dateFrom.toISOString() : <any>undefined;
        data["dateTo"] = this.dateTo ? this.dateTo.toISOString() : <any>undefined;
        data["minRate"] = this.minRate;
        data["maxRate"] = this.maxRate;
        data["avgRate"] = this.avgRate;
        if (Array.isArray(this.rateList)) {
            data["rateList"] = [];
            for (let item of this.rateList)
                data["rateList"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface ICurrencyRateResponseDto {
    sourceCurrencyCode?: string | undefined;
    targetCurrencyCode?: string | undefined;
    dateFrom?: Date;
    dateTo?: Date;
    minRate?: number;
    maxRate?: number;
    avgRate?: number;
    rateList?: RateForDateDto[] | undefined;
}

export class ExchangeRateApiTypeDto implements IExchangeRateApiTypeDto {
    code?: string | undefined;
    name?: string | undefined;

    constructor(data?: IExchangeRateApiTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ExchangeRateApiTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExchangeRateApiTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        return data;
    }
}

export interface IExchangeRateApiTypeDto {
    code?: string | undefined;
    name?: string | undefined;
}

export class RateForDateDto implements IRateForDateDto {
    date?: string | undefined;
    rate?: number;

    constructor(data?: IRateForDateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.rate = _data["rate"];
        }
    }

    static fromJS(data: any): RateForDateDto {
        data = typeof data === 'object' ? data : {};
        let result = new RateForDateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["rate"] = this.rate;
        return data;
    }
}

export interface IRateForDateDto {
    date?: string | undefined;
    rate?: number;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}